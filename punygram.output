Terminals unused in grammar

    FLOATLIT
    NAME
    INTLIT
    STRINGLIT
    INDENT
    DEDENT
    LPAR
    RPAR
    LSQB
    RSQB
    COLON
    COMMA
    PLUS
    MINUS
    STAR
    SLASH
    VBAR
    AMPER
    LESS
    GREATER
    EQUAL
    DOT
    PERCENT
    LBRACE
    RBRACE
    EQEQUAL
    NOTEQUAL
    LESSEQUAL
    GREATEREQUAL
    TILDE
    CIRCUMFLEX
    LEFTSHIFT
    RIGHTSHIFT
    DOUBLESTAR
    PLUSEQUAL
    MINEQUAL
    STAREQUAL
    SLASHEQUAL
    PERCENTEQUAL
    AMPEREQUAL
    VBAREQUAL
    CIRCUMFLEXEQUAL
    LEFTSHIFTEQUAL
    RIGHTSHIFTEQUAL
    DOUBLESTAREQUAL
    DOUBLESLASH
    DOUBLESLASHEQUAL
    AT
    ATEQUAL
    RARROW
    ELLIPSIS
    COLONEQUAL
    PYFALSE
    PYDEF
    IF
    RAISE
    NONE
    DEL
    IMPORT
    RETURN
    PYTRUE
    ELIF
    IN
    TRY
    AND
    ELSE
    IS
    WHILE
    AS
    EXCEPT
    LAMBDA
    WITH
    ASSERT
    FINALLY
    NONLOCAL
    YIELD
    BREAK
    FOR
    NOT
    CLASS
    FROM
    OR
    CONTINUE
    GLOBAL
    OP
    AWAIT
    ASYNC
    TYPE_IGNORE
    TYPE_COMMENT
    ERRORTOKEN
    COMMENT
    ENCODING
    EMPTY
    MATCH
    ASSIGNMENT
    DECORATOR


Grammar

    0 $accept: file_input $end

    1 file_input: nl_OR_stmt_rep ENDMARKER

    2 nl_OR_stmt_rep: ε
    3               | nl_OR_stmt_rep NEWLINE
    4               | nl_OR_stmt_rep stmt

    5 stmt: simple_stmt

    6 simple_stmt: small_stmt semi_small_stmt_rep semi_opt NEWLINE

    7 semi_small_stmt_rep: ε
    8                    | semi_small_stmt_rep SEMI small_stmt

    9 semi_opt: ε
   10         | SEMI

   11 small_stmt: pass_stmt

   12 pass_stmt: PASS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    FLOATLIT <treeptr> (258)
    ENDMARKER <treeptr> (259) 1
    NAME <treeptr> (260)
    INTLIT <treeptr> (261)
    STRINGLIT <treeptr> (262)
    NEWLINE <treeptr> (263) 3 6
    INDENT <treeptr> (264)
    DEDENT <treeptr> (265)
    LPAR <treeptr> (266)
    RPAR <treeptr> (267)
    LSQB <treeptr> (268)
    RSQB <treeptr> (269)
    COLON <treeptr> (270)
    COMMA <treeptr> (271)
    SEMI <treeptr> (272) 8 10
    PLUS <treeptr> (273)
    MINUS <treeptr> (274)
    STAR <treeptr> (275)
    SLASH <treeptr> (276)
    VBAR <treeptr> (277)
    AMPER <treeptr> (278)
    LESS <treeptr> (279)
    GREATER <treeptr> (280)
    EQUAL <treeptr> (281)
    DOT <treeptr> (282)
    PERCENT <treeptr> (283)
    LBRACE <treeptr> (284)
    RBRACE <treeptr> (285)
    EQEQUAL <treeptr> (286)
    NOTEQUAL <treeptr> (287)
    LESSEQUAL <treeptr> (288)
    GREATEREQUAL <treeptr> (289)
    TILDE <treeptr> (290)
    CIRCUMFLEX <treeptr> (291)
    LEFTSHIFT <treeptr> (292)
    RIGHTSHIFT <treeptr> (293)
    DOUBLESTAR <treeptr> (294)
    PLUSEQUAL <treeptr> (295)
    MINEQUAL <treeptr> (296)
    STAREQUAL <treeptr> (297)
    SLASHEQUAL <treeptr> (298)
    PERCENTEQUAL <treeptr> (299)
    AMPEREQUAL <treeptr> (300)
    VBAREQUAL <treeptr> (301)
    CIRCUMFLEXEQUAL <treeptr> (302)
    LEFTSHIFTEQUAL <treeptr> (303)
    RIGHTSHIFTEQUAL <treeptr> (304)
    DOUBLESTAREQUAL <treeptr> (305)
    DOUBLESLASH <treeptr> (306)
    DOUBLESLASHEQUAL <treeptr> (307)
    AT <treeptr> (308)
    ATEQUAL <treeptr> (309)
    RARROW <treeptr> (310)
    ELLIPSIS <treeptr> (311)
    COLONEQUAL <treeptr> (312)
    PYFALSE <treeptr> (313)
    PYDEF <treeptr> (314)
    IF <treeptr> (315)
    RAISE <treeptr> (316)
    NONE <treeptr> (317)
    DEL <treeptr> (318)
    IMPORT <treeptr> (319)
    RETURN <treeptr> (320)
    PYTRUE <treeptr> (321)
    ELIF <treeptr> (322)
    IN <treeptr> (323)
    TRY <treeptr> (324)
    AND <treeptr> (325)
    ELSE <treeptr> (326)
    IS <treeptr> (327)
    WHILE <treeptr> (328)
    AS <treeptr> (329)
    EXCEPT <treeptr> (330)
    LAMBDA <treeptr> (331)
    WITH <treeptr> (332)
    ASSERT <treeptr> (333)
    FINALLY <treeptr> (334)
    NONLOCAL <treeptr> (335)
    YIELD <treeptr> (336)
    BREAK <treeptr> (337)
    FOR <treeptr> (338)
    NOT <treeptr> (339)
    CLASS <treeptr> (340)
    FROM <treeptr> (341)
    OR <treeptr> (342)
    CONTINUE <treeptr> (343)
    GLOBAL <treeptr> (344)
    PASS <treeptr> (345) 12
    OP <treeptr> (346)
    AWAIT <treeptr> (347)
    ASYNC <treeptr> (348)
    TYPE_IGNORE <treeptr> (349)
    TYPE_COMMENT <treeptr> (350)
    ERRORTOKEN <treeptr> (351)
    COMMENT <treeptr> (352)
    ENCODING <treeptr> (353)
    EMPTY <treeptr> (354)
    MATCH <treeptr> (355)
    ASSIGNMENT <treeptr> (356)
    DECORATOR <treeptr> (357)


Nonterminals, with rules where they appear

    $accept (103)
        on left: 0
    file_input (104)
        on left: 1
        on right: 0
    nl_OR_stmt_rep (105)
        on left: 2 3 4
        on right: 1 3 4
    stmt (106)
        on left: 5
        on right: 4
    simple_stmt (107)
        on left: 6
        on right: 5
    semi_small_stmt_rep (108)
        on left: 7 8
        on right: 6 8
    semi_opt (109)
        on left: 9 10
        on right: 6
    small_stmt (110)
        on left: 11
        on right: 6 8
    pass_stmt (111)
        on left: 12
        on right: 11


State 0

    0 $accept: • file_input $end

    $default  reduce using rule 2 (nl_OR_stmt_rep)

    file_input      go to state 1
    nl_OR_stmt_rep  go to state 2


State 1

    0 $accept: file_input • $end

    $end  shift, and go to state 3


State 2

    1 file_input: nl_OR_stmt_rep • ENDMARKER
    3 nl_OR_stmt_rep: nl_OR_stmt_rep • NEWLINE
    4               | nl_OR_stmt_rep • stmt

    ENDMARKER  shift, and go to state 4
    NEWLINE    shift, and go to state 5
    PASS       shift, and go to state 6

    stmt         go to state 7
    simple_stmt  go to state 8
    small_stmt   go to state 9
    pass_stmt    go to state 10


State 3

    0 $accept: file_input $end •

    $default  accept


State 4

    1 file_input: nl_OR_stmt_rep ENDMARKER •

    $default  reduce using rule 1 (file_input)


State 5

    3 nl_OR_stmt_rep: nl_OR_stmt_rep NEWLINE •

    $default  reduce using rule 3 (nl_OR_stmt_rep)


State 6

   12 pass_stmt: PASS •

    $default  reduce using rule 12 (pass_stmt)


State 7

    4 nl_OR_stmt_rep: nl_OR_stmt_rep stmt •

    $default  reduce using rule 4 (nl_OR_stmt_rep)


State 8

    5 stmt: simple_stmt •

    $default  reduce using rule 5 (stmt)


State 9

    6 simple_stmt: small_stmt • semi_small_stmt_rep semi_opt NEWLINE

    $default  reduce using rule 7 (semi_small_stmt_rep)

    semi_small_stmt_rep  go to state 11


State 10

   11 small_stmt: pass_stmt •

    $default  reduce using rule 11 (small_stmt)


State 11

    6 simple_stmt: small_stmt semi_small_stmt_rep • semi_opt NEWLINE
    8 semi_small_stmt_rep: semi_small_stmt_rep • SEMI small_stmt

    SEMI  shift, and go to state 12

    $default  reduce using rule 9 (semi_opt)

    semi_opt  go to state 13


State 12

    8 semi_small_stmt_rep: semi_small_stmt_rep SEMI • small_stmt
   10 semi_opt: SEMI •

    PASS  shift, and go to state 6

    $default  reduce using rule 10 (semi_opt)

    small_stmt  go to state 14
    pass_stmt   go to state 10


State 13

    6 simple_stmt: small_stmt semi_small_stmt_rep semi_opt • NEWLINE

    NEWLINE  shift, and go to state 15


State 14

    8 semi_small_stmt_rep: semi_small_stmt_rep SEMI small_stmt •

    $default  reduce using rule 8 (semi_small_stmt_rep)


State 15

    6 simple_stmt: small_stmt semi_small_stmt_rep semi_opt NEWLINE •

    $default  reduce using rule 6 (simple_stmt)
