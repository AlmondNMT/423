procedure Any(x[])
    if *x == 1 then
        return x[1]
    return 0
end

procedure None(x[])
    return &null
end

procedure bool(x[])
    if *x == 1 then {
        if(x[1] == "None" | 0 | "False") then return 0
        return 1
    }
    return 0 # this isn't really false, so idk
end

procedure chr(x)
    # TODO Return character from ascii 
end

procedure float(x[])
    if *x == 0 then return 0.0
    return 1.0 * x[1]
end

procedure input_puny(x[])
    if *x == 1 then prints(x[1])
    read(&input)
end

procedure int(x[])
    if *x == 1 then return 1 * x[1]
    return 0
end

procedure length(x)
    return *x
end

procedure remove_element(a, x)
    if type(a) === "list" then {
        index := 1
        every k := !a do {
            if x === k then {
                delete(a, index)
            }
            index +:= 1
        }
    }
end

procedure max(x[])

    # Just return the maximum in the list
    if *x == 1 & type(x[1]) === "list" then return max !x[1]
    highest := x[1]
    every i := 2 to *x do {
        if x[i] > highest then highest := x[i]
    }
    return highest
end



procedure min(x[])
    if *x == 1 & type(x[1]) === "list" then return min !x[1]
    smallest := x[1]
    every i := 2 to *x do {
        if x[i] < smallest then smallest := x[i]
    }
    return smallest
end

### Dictionary/Tables
procedure keys(x) 
    if type(x) === "table" then {
        a := []
        every k := key(x) do {
            put(a, k)
        }
    }
    return a
end

procedure values(x)
    if type(x) === "table" then {
        a := []
        every k := !x do {
            put(a, k)
        }
    }
    return a
end


## Math stuff
procedure pow(a, b)
    return a ^ b
end

procedure round(x[])
    if *x == 1 then {
        return integer(x[1])
    }
    else if *x == 2 then {
        a := x[1]
        b := x[2]
        rhs := a * 10 ^ b % 1 * 10
        if rhs > 5 then a +:= 1.0 / (10 ^ b)
        return integer(a * 10 ^ b) / 10.0 ^ b
    }
end

procedure range(x[])
    every i := !x do {
        if not type(x) === "integer" then {
            print("range arguments must be integers")
            &fail
        }
    }
    a := []
    if *x == 1 then {
        every i := 0 to x[1] - 1 do
            a |||:= [i]
    } 
    else if *x == 2 then {
        every i := x[1] to x[2] - 1 do
            a |||:= [i]
    }
    else {
        every i := x[1] to x[2] - 1 by x[3] do 
            a |||:= [i]
    }
    return a
end

# print method (with space separation)
procedure print(x[])
    prints !x # Idk why this syntax, but it works
    write()
end

procedure prints(x[])
    every k := 1 to *x do {
        if type(x[k]) === "list" then {
            write_list(x[k])
        } else if type(x[k]) === "table" then {
            write_dict(x[k])
        } else {
            writes(x[k])
        }
        if (k < *x ) then writes(" ")
    }
end

procedure write_list(x)
    if *x == 0 then {
        writes("[]")
    } 
    else {
        writes("[")
        every k := 1 to *x - 1 do {
            if type(x[k]) === "list" then {
                write_list(x[k])
            } else if type(x[k]) === "table" then {
                write_dict(x[k])
            } else {
                writes(x[k], ", ")
            }
        }
        prints(x[*x])
        prints("]")
    }
end

procedure write_dict(x)
    if *x == 0 then {
        writes("{}")
    } 
    else {
        writes("{")
        every k := key(x) do {
            writes(k, ": ", x[k], ", ")
        }
        writes("}")
    }
end

# String replace
procedure replace(s, x, y)
    occ := []
    len := *x
    new := ""
    if type(s) === "string" then {
        every i := 1 to *s do {
            if s[i:(len+1)] === x then {
                new ||:= y
                i +:= len
            } else {
                new ||:= s[i]
            }
        }
    }
    return new
end

# String split method TODO
procedure split(s, x)

end

