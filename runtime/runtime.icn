# Sum over a list
procedure sum_1(iterable)
    total := 0
    every i := !iterable do {
        total +:= i
    }
    return total
end

# Sum over list with a starting total
procedure sum_2(iterable, start)
    return start + sum_1(iterable)
end

# No-arg float function call
procedure float_0()
    return 0.0
end 

# Single-argument float function call
# This implicitly converts the argument to a float, if
#   possible
procedure float_1(arg)
    return arg * 1.0
end

# Default no-arg `bool` return false
procedure bool_0()
end

# Single-arg `bool` return false only for &null, 0, and False
procedure bool_1(arg)
    if arg == ("0" | "" | "None" | 0 | "False") then {
        return "False"
    }
    return "True"
end

procedure str()
    return "";
end

procedure str_1(arg)
    return string(arg)
end

procedure range_1(x)
    if type(x) === "integer" then {
        a := list()
        count := 0
        while count < x do {
            a |||:= [count]
            count +:= 1
        }
        write(type(a))
    } else {
        write(type(x), " cannot be interpreted as an integer")
    }
end

# String split method TODO
procedure split(x)

end

# print method (with space separation)
procedure print(x[])
    every k := !x do {
        if type(k) === "list" then {
            write_list(k)
            writes(" ")
        } else if type(k) === "table" then {
            write_dict(k)
            writes(" ")
        } else {
            writes(k, " ")
        }
    }
    write()
end

procedure write_list(x)
    if *x == 0 then {
        writes("[]")
    } 
    else {
        writes("[")
        every k := 1 to *x - 1 do {
            writes(x[k], ", ")
        }
        writes(x[*x], "]")
    }
end

procedure write_dict(x)
    if *x == 0 then {
        writes("{}")
    } 
    else {
        writes("{")
        every k := key(x) do {
            writes(k, ": ", x[k], ", ")
        }
        writes("}")
    }
end
