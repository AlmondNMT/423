# Any class
# List class
class List(m_a)
    method append(a)
        m_a |||:= [a]
    end

    method remove(a)
        # TODO
    end

initially(x[])
    m_a := list(x)
    return;

end
# Sum over a list
procedure sum_1(iterable)
    total := 0
    every i := !iterable do {
        total +:= i
    }
    return total
end

procedure Any(x[])
    if *x == 1 then
        return x[1]
    return 0
end

procedure None(x[])
    return &null
end

procedure bool(x[])
    if *x == 1 then {
        if(x[1] == "None" | 0 | "False") then return 0
        return 1
    }
    return 0 # this isn't really false, so idk
end

procedure chr(x)
    # TODO Return character from ascii 
end

procedure float(x[])
    if *x == 0 then return 0.0
    return 1.0 * x[1]
end

procedure input(x[])
    if *x == 1 then prints(x[1])
    read(&input)
end

# Sum over list with a starting total
procedure sum_2(iterable, start)
    return start + sum_1(iterable)
end

# No-arg float function call
procedure float_0()
    return 0.0
end 

# Single-argument float function call
# This implicitly converts the argument to a float, if
#   possible
procedure float_1(arg)
    return arg * 1.0
end

# Default no-arg `bool` return false
procedure bool_0()
end

# Single-arg `bool` return false only for &null, 0, and False
procedure bool_1(arg)
    if arg == ("0" | "" | "None" | 0 | "False") then {
        return "False"
    }
    return "True"
end

procedure str()
    return "";
end

procedure str_1(arg)
    return string(arg)
end

procedure range(x[])
    every i := !x do {
        if not type(x) === "integer" then {
            print("range arguments must be integers")
            &fail
        }
    }
    a := []
    if *x == 1 then {
        every i := 0 to x[1] - 1 do
            a |||:= [i]
    } 
    else if *x == 2 then {
        every i := x[1] to x[2] - 1 do
            a |||:= [i]
    }
    else {
        every i := x[1] to x[2] - 1 by x[3] do 
            a |||:= [i]
    }
    return a
end

# String split method TODO
procedure split(x)

end

# print method (with space separation)
procedure print(x[])
    prints !x # Idk why this syntax, but it works
    write()
end

procedure prints(x[])
    every k := 1 to *x do {
        if type(x[k]) === "list" then {
            write_list(x[k])
        } else if type(x[k]) === "table" then {
            write_dict(x[k])
        } else {
            writes(x[k])
        }
        if (k < *x ) then writes(" ")
    }
end

procedure write_list(x)
    if *x == 0 then {
        writes("[]")
    } 
    else {
        writes("[")
        every k := 1 to *x - 1 do {
            if type(x[k]) === "list" then {
                write_list(x[k])
            } else if type(x[k]) === "table" then {
                write_dict(x[k])
            } else {
                writes(x[k], ", ")
            }
        }
        prints(x[*x])
        prints("]")
    }
end

procedure write_dict(x)
    if *x == 0 then {
        writes("{}")
    } 
    else {
        writes("{")
        every k := key(x) do {
            writes(k, ": ", x[k], ", ")
        }
        writes("}")
    }
end
